name: verify-all

on: 
  workflow_dispatch:
  push:
    branches: main

jobs:
  ctest:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Release

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}} --target build_ctest

    - name: Test
      working-directory: build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  oj-verify-all:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: pip3 install -U online-judge-verify-helper


    # required only if you want to verify Haskell code
    #- name: Install dependencies (Haskell)
    #  uses: actions/setup-haskell@v1

    # required only if you want to verify Java code
    #- name: Install dependencies (Java)
    #  uses: actions/setup-java@v1
    #  with:
    #    java-version: 11

    # required only if you want to verify C# script files
    #- uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: '3.1.101'
    #- name: Install dependencies (C#)
    #  run: dotnet tool install -g dotnet-script

    # required only if you want to verify Go code
    #- name: Install dependencies (Go)
    #  uses: actions/setup-go@v2

    # required only if you want to verify Ruby code
    #- name: Install dependencies (Ruby)
    #  uses: actions/setup-ruby@v1

    # required only if you want to verify Nim code
    #- name: Install dependencies (Nim)
    #  run: sudo apt install nim

    #- name: Set up Rust (1.42.0)
    #  uses: actions-rs/toolchain@v1
    #  with:
    #    toolchain: 1.42.0-x86_64-unknown-linux-gnu
    #    default: true
    #    profile: minimal

    # required by cargo-udeps
    #- name: Set up Rust (nightly)
    #  uses: actions-rs/toolchain@v1
    #  with:
    #    toolchain: nightly-x86_64-unknown-linux-gnu
    #    default: true
    #    profile: minimal

    # required only if you set `languages.rust.list_dependencies_backend.kind` to `"cargo-udeps"`
    #- name: Install cargo-udeps for Rust
    #  uses: actions-rs/install@v0.1
    #  with:
    #    crate: cargo-udeps
    #    use-tool-cache: true

    - name: Run tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: oj-verify all
